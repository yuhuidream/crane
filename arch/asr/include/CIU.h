/******************************************************************************
 *
 * Name:	CIU.h
 * Project:	Marvell Registers
 * Purpose:	Marvell Registers
 *
 ******************************************************************************/

/******************************************************************************
 *
 *  (C)Copyright 2005 - 2013 Marvell. All Rights Reserved.
 *
 *  THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF MARVELL.
 *  The copyright notice above does not evidence any actual or intended
 *  publication of such source code.
 *  This Module contains Proprietary Information of Marvell and should be
 *  treated as Confidential.
 *  The information in this file is provided for the exclusive use of the
 *  licensees of Marvell.
 *  Such users have the right to use, modify, and incorporate this code into
 *  products for purposes authorized by the license agreement provided they
 *  include this notice and the associated copyright notice with any such
 *  product.
 *  The information in this file is provided "AS IS" without warranty.
 *
 ******************************************************************************/

/******************************************************************************
 *
 * This file was automatically generated by reg.pl using  *	CIU.csv
 *
 ******************************************************************************/

/******************************************************************************
 *
 * History:
 *
 ********* PLEASE INSERT THE CVS HISTORY OF THE PREVIOUS VERSION HERE. *********
 *******************************************************************************/

#ifndef	__INC_CIU_H
#define	__INC_CIU_H



typedef struct
{
	__IO uint32_t	CHIP_ID;								/* 0x0000 32 bit	Chip ID Register */
	__IO uint32_t	SEAGULL_CPU_CONF;						/* 0x0004 32 bit	<var
												 *			Processor:
												 *			Osprey> CPU
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	MOHAWK_CPU_CONF;						/* 0x0008 32 bit	<var
												 *			Processor:
												 *			Mohawk> CPU
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	SEAGULL_CPU_SRAM_SPD;					/* 0x000C 32 bit	<var
												 *			Processor:
												 *			Osprey> CPU SRAM
												 *			Speed Config
												 *			Register
												 */
	__IO uint32_t	MOHAWK_CPU_SRAM_SPD;					/* 0x0010 32 bit	<var
												 *			Processor:
												 *			Mohawk> CPU SRAM
												 *			Speed Config
												 *			Register
												 */
	__IO uint32_t	SEAGULL_CPU_L2C_SRAM_SPD;				/* 0x0014 32 bit	<var
												 *			Processor:
												 *			Osprey> CPU L2
												 *			Cache SRAM Speed
												 *			Config Register
												 */
	__IO uint32_t	MOHAWK_CPU_L2C_SRAM_SPD;				/* 0x0018 32 bit	<var
												 *			Processor:
												 *			Mohawk> CPU L2
												 *			Cache SRAM Speed
												 *			Config Register
												 */
	__IO uint32_t	RESERVED0[1];
	__IO uint32_t	SYS_BOOT_CNTRL;							/* 0x0020 32 bit	System Boot
												 *			Control Register
												 */
	__IO uint32_t	SW_BRANCH_ADDR;							/* 0x0024 32 bit	Software
												 *			Branch Address
												 *			Register
												 */
	__IO uint32_t	PERF_COUNT0_CNTRL_A;					/* 0x0028 32 bit	Performance
												 *			Counter 0 Control
												 *			Register A
												 */
	__IO uint32_t	PERF_COUNT1_CNTRL_A;					/* 0x002C 32 bit	Performance
												 *			Counter 1 Control
												 *			Register A
												 */
	__IO uint32_t	PERF_COUNT2_CNTRL;						/* 0x0030 32 bit	Performance
												 *			Counter 2 Control
												 *			Register
												 */
	__IO uint32_t	PERF_COUNT0;							/* 0x0034 32 bit	Performance
												 *			Count 0 Register
												 */
	__IO uint32_t	PERF_COUNT1;							/* 0x0038 32 bit	Performance
												 *			Count 1 Register
												 */
	__IO uint32_t	PERF_COUNT2;							/* 0x003C 32 bit	Performance
												 *			Count 2 Register
												 */
	__IO uint32_t	MC_CONF;								/* 0x0040 32 bit	Memory
												 *			Controller
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	RESERVED1[1];
	__IO uint32_t	U3_CONF;								/* 0x0048 32 bit	Memory
												 *			Controller
												 *			Configuration
												 *			Register 2
												 */
	__IO uint32_t	RESERVED2[1];
	__IO uint32_t	AXI2MC0_CTRL;							/* 0x0050 32 bit	AXI2MC0
												 *			Control Register
												 */
	__IO uint32_t	RESERVED3[2];
	__IO uint32_t	AXI2MC2_CTRL;							/* 0x005C 32 bit	AXI2MC2
												 *			Control Register
												 */
	__IO uint32_t	RESERVED4[5];
	__IO uint32_t	PERF_COUNT3;							/* 0x0074 32 bit	Performance
												 *			Count 3 Register
												 */
	__IO uint32_t	PERF_COUNT3_CNTRL_A;					/* 0x0078 32 bit	Performance
												 *			Counter 3 Control
												 *			Register A
												 */
	__IO uint32_t	PERF_COUNT0_CNTRL_B;					/* 0x007C 32 bit	Performance
												 *			Counter 0 Control
												 *			Register B
												 */
	__IO uint32_t	PERF_COUNT1_CNTRL_B;					/* 0x0080 32 bit	Performance
												 *			Counter 1 Control
												 *			Register B
												 */
	__IO uint32_t	PERF_COUNT2_CNTRL_B;					/* 0x0084 32 bit	Performance
												 *			Counter 2 Control
												 *			Register B
												 */
	__IO uint32_t	PERF_COUNT3_CNTRL_B;					/* 0x0088 32 bit	Performance
												 *			Counter 3 Control
												 *			Register B
												 */
	__IO uint32_t	RESERVED5[1];
	__IO uint32_t	DDR_PHY_TST_CONFIG;						/* 0x0090 32 bit	DDR PHY TEST
												 *			Configuration
												 *			register
												 */
	__IO uint32_t	DDR_PHY_TST_SEED;						/* 0x0094 32 bit	DDR PHY TEST
												 *			Seed register
												 */
	__IO uint32_t	DDR_PHY_TST_SIGNATURE;					/* 0x0098 32 bit	DDR PHY TEST
												 *			Signature register
												 */
	__IO uint32_t	DDR_PHY_TST_STATUS;						/* 0x009C 32 bit	DDR PHY TEST
												 *			status register
												 */
	__IO uint32_t	CR5_CONF;								/* 0x00A0 32 bit	<var
												 *			Processor:
												 *			Osprey> CPU
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	CR5_SRAM_CONF;							/* 0x00A4 32 bit	<var
												 *			Processor:
												 *			Osprey> SRAM
												 *			Timing
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	CR5_PPX_CONF;							/* 0x00A8 32 bit	<var
												 *			Processor:
												 *			Osprey> AXI
												 *			peripheral
												 *			interface
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	CR5_PPV_CONF;							/* 0x00AC 32 bit	<var
												 *			Processor:
												 *			Osprey>
												 *			Virtual-AXI
												 *			peripheral
												 *			interface
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	SEAGULL_L2C_ADDR_FILTER_CONF;			/* 0x00B0 32 bit	<var
												 *			Processor:
												 *			Osprey> L2C
												 *			Address Filter
												 *			Config Register
												 */
	__IO uint32_t	SEAGULL_L2C_CONF;						/* 0x00B4 32 bit	<var
												 *			Processor:
												 *			Osprey> L2C
												 *			Config Register
												 */
	__IO uint32_t	SEAGULL_L2C_SRAM_CONF;					/* 0x00B8 32 bit	<var
												 *			Processor:
												 *			Osprey> L2C SRAM
												 *			Timing
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	RESERVED6[1];
	__IO uint32_t	CA7_SCU_CONF;							/* 0x00C0 32 bit	<var
												 *			Processor:
												 *			Application MP>
												 *			CPU SCU Prepheral
												 *			Base Register
												 */
	__IO uint32_t	CA7_CORESIGHT_ROM_ADDR;					/* 0x00C4 32 bit	<var
												 *			Processor:
												 *			Application MP>
												 *			CPU Coresight Rom
												 *			addr Register
												 */
	__IO uint32_t	CA7_CORESIGHT_SELF_ADDR;				/* 0x00C8 32 bit	<var
												 *			Processor:
												 *			Application MP>
												 *			CPU Coresight
												 *			Self addr Register
												 */
	__IO uint32_t	RESERVED7[1];
	__IO uint32_t	CA7_CPU_SRAM_CONF_0;					/* 0x00D0 32 bit	<var
												 *			Processor:
												 *			Application MP>
												 *			CPU SRAM_0 Config
												 *			Register
												 */
	__IO uint32_t	CA7_CPU_SRAM_CONF_1;					/* 0x00D4 32 bit	<var
												 *			Processor:
												 *			Application MP>
												 *			CPU SRAM_1 Config
												 *			Register
												 */
	__IO uint32_t	CA7_WARM_RESET_VECTOR;					/* 0x00D8 32 bit	<var
												 *			Processor:
												 *			Application MP>
												 *			Warm Reset Vector
												 *			Register
												 */
	__IO uint32_t	RESERVED8[1];
	__IO uint32_t	CA7_CORE_CONF;							/* 0x00E0 32 bit	<var
												 *			Processor:
												 *			Application>
												 *			Core0
												 *			Configuration
												 *			Register
												 */
	__IO uint32_t	RESERVED9[1];
	__IO uint32_t	SW_SCRATCH;								/* 0x00E8 32 bit	Software
												 *			Scratch Register
												 */
	__IO uint32_t 	RESERVED10;
	__IO uint32_t 	FBRC_QOS_CTRL1;
	__IO uint32_t 	FBRC_QOS_CTRL2;
	__IO uint32_t 	AP_DMA_AXI_XTC;
	__IO uint32_t 	AP_LCD_SRAM_XTC;
}CIU_TypeDef;


#define	CIU_BASE	0xD4282C00
#define	CIU	((CIU_TypeDef*)CIU_BASE)


/*
 *
 *	THE BIT DEFINES
 *
 */
/*	CHIP_ID							0x0000	Chip ID Register */
/*		Bit(s) CHIP_ID_RSRV_ reserved */
#define	CHIP_ID_REV_ID_MSK			SHIFT16(0xff)	/* Revision ID */
#define	CHIP_ID_REV_ID_BASE			16
#define	CHIP_ID_CHIP_ID_MSK			SHIFT0(0xffff)	/* Chip ID (cp910/cp920) */
#define	CHIP_ID_CHIP_ID_BASE		0

/*	SEAGULL_CPU_CONF				0x0004	<var Processor: Osprey> CPU
 *											Configuration Register
 */
/*		Bit(s) SEAGULL_CPU_CONF_RSRV_ reserved */
/* DMA2TCM access durng WFI */
#define	SEAGULL_CPU_CONF_DMA2TCM_ACCESS_CP			BIT_25
/*		Bit(s) SEAGULL_CPU_CONF_RSRV_ reserved */
/* CPU Firwall enable signal output mask */
#define	SEAGULL_CPU_CONF_CPU_FIREWALL_MASK_CP		BIT_21
/* CPU power taken during WFI (for fast wake-up) */
#define	SEAGULL_CPU_CONF_CPU_POWER_TAKEN_CP			BIT_20
/* MC fast queue enable */
#define	SEAGULL_CPU_CONF_CPU2MC_FAST_QU_CP			BIT_19
/* L2 Cache Burst 8 enable */
#define	SEAGULL_CPU_CONF_L2C_BURST8_ENABLE_CP		BIT_18
/* Line fill Critical Word First Enable */
#define	SEAGULL_CPU_CONF_LF_CWF_EN_CP				BIT_17
/* L2 Cache Idle */
#define	SEAGULL_CPU_CONF_L2C_IDLE					BIT_16
/* Boot from Status after Chip Reset */
#define	SEAGULL_CPU_CONF_BOOT_FROM					BIT_15
/*		Bit(s) SEAGULL_CPU_CONF_RSRV_ reserved */
/* L2 Cache Transparent Mode */
#define	SEAGULL_CPU_CONF_L2C_TP_MODE				BIT_12
/* L2 Cache ECC Check Enable */
#define	SEAGULL_CPU_CONF_L2C_ECC_CHK_EN				BIT_11
/* DDR Shadow Re-Map Enable */
#define	SEAGULL_CPU_CONF_REMAP_EN					BIT_10
/* PCLK WFI Enable */
#define	SEAGULL_CPU_CONF_PCLK_WFI_EN				BIT_9
/* Select Marvell ID */
#define	SEAGULL_CPU_CONF_SEL_MRVL_ID				BIT_8
/* Clock Gate Bypass 1 */
#define	SEAGULL_CPU_CONF_CG_BPASS1					BIT_7
/* Clock Gate Bypass 0 */
#define	SEAGULL_CPU_CONF_CG_BPASS0					BIT_6
/* FIFO Merge Disable */
#define	SEAGULL_CPU_CONF_AFIFO_MERGE_DIS			BIT_5
/* L2 Cache RAM Select */
#define	SEAGULL_CPU_CONF_L2C_RAM_SEL				BIT_4
/* L2 Cache Enable */
#define	SEAGULL_CPU_CONF_L2C_EXIST					BIT_3
/* L2 Cache Write Mode */
#define	SEAGULL_CPU_CONF_L2C_WT_MODE				BIT_2
/*		Bit(s) SEAGULL_CPU_CONF_RSRV_ reserved */
/* Vector Init High */
#define	SEAGULL_CPU_CONF_VINITHI					BIT_0

/*	MOHAWK_CPU_CONF					0x0008	<var Processor: Mohawk> CPU
 *											Configuration Register
 */
/*		Bit(s) MOHAWK_CPU_CONF_RSRV_ reserved */
/* L2 Cache 8-way set associatve disable */
#define	MOHAWK_CPU_CONF_L2C_WAY74_DISABLE_AP				BIT_24
/* L2 Cache write allocate mode */
#define	MOHAWK_CPU_CONF_L2C_WRITE_ALLOC_AP_MSK			SHIFT22(0x3)
#define	MOHAWK_CPU_CONF_L2C_WRITE_ALLOC_AP_BASE		22
/* CPU Firwall enable signal output mask */
#define	MOHAWK_CPU_CONF_CPU_FIREWALL_MASK_AP				BIT_21
/* CPU power taken during WFI (for fast wake-up) */
#define	MOHAWK_CPU_CONF_CPU_POWER_TAKEN_AP					BIT_20
/* MC fast queue enable */
#define	MOHAWK_CPU_CONF_CPU2MC_FAST_QU_AP					BIT_19
/* L2 Cache Burst 8 enable */
#define	MOHAWK_CPU_CONF_L2C_BURST8_ENABLE_AP				BIT_18
/* Line fill Critical Word First Enable */
#define	MOHAWK_CPU_CONF_LF_CWF_EN_AP						BIT_17
/* L2 Cache Idle */
#define	MOHAWK_CPU_CONF_L2C_IDLE							BIT_16
/* Boot from Status */
#define	MOHAWK_CPU_CONF_BOOT_FROM							BIT_15
/* L2 Cache MMU Not Cacheable */
#define	MOHAWK_CPU_CONF_MMU_NOT_CA							BIT_14
/* L2 Cache No MMU Translation Abort */
#define	MOHAWK_CPU_CONF_NO_TRANS_ABT						BIT_13
/* L2 Cache Attribute Select */
#define	MOHAWK_CPU_CONF_L2C_ATTR_SEL						BIT_12
/* L2 Cache ECC Check Enable */
#define	MOHAWK_CPU_CONF_L2C_ECC_CHK_EN						BIT_11
/* DDR Shadow Re-Map Enable */
#define	MOHAWK_CPU_CONF_REMAP_EN							BIT_10
/* PCLK WFI Enable */
#define	MOHAWK_CPU_CONF_PCLK_WFI_EN							BIT_9
/* Select Marvell ID */
#define	MOHAWK_CPU_CONF_SEL_MRVL_ID							BIT_8
/* Clock Gate Bypass 1 */
#define	MOHAWK_CPU_CONF_CG_BPASS1							BIT_7
/* Clock Gate enable */
#define	MOHAWK_CPU_CONF_CG_ENABLE							BIT_6
/* FIFO Merge Disable */
#define	MOHAWK_CPU_CONF_AFIFO_MERGE_DIS						BIT_5
/* L2 Cache RAM Select */
#define	MOHAWK_CPU_CONF_L2C_RAM_SEL							BIT_4
/* L2 Cache Enable */
#define	MOHAWK_CPU_CONF_L2C_EXIST							BIT_3
/* L2 Cache Write Mode */
#define	MOHAWK_CPU_CONF_L2C_WT_MODE							BIT_2
/* Non-MMU Mode */
#define	MOHAWK_CPU_CONF_NONMMU_MODE							BIT_1
/* Vector Init High */
#define	MOHAWK_CPU_CONF_VINITHI								BIT_0

/*	SEAGULL_CPU_SRAM_SPD			0x000C	<var Processor: Osprey> CPU SRAM
 *											Speed Config Register
 */
#define	SEAGULL_CPU_SRAM_SPD_DTCM_RTC_MSK			SHIFT29(0x7)	/* DTCM RTC */
#define	SEAGULL_CPU_SRAM_SPD_DTCM_RTC_BASE			29
#define	SEAGULL_CPU_SRAM_SPD_ITCM_RTC_MSK			SHIFT26(0x7)	/* ITCM RTC */
#define	SEAGULL_CPU_SRAM_SPD_ITCM_RTC_BASE			26
#define	SEAGULL_CPU_SRAM_SPD_BPM_WTC_MSK			SHIFT23(0x7)	/* BPM WTC */
#define	SEAGULL_CPU_SRAM_SPD_BPM_WTC_BASE			23
#define	SEAGULL_CPU_SRAM_SPD_BPM_RTC_MSK			SHIFT21(0x3)	/* BPM RTC */
#define	SEAGULL_CPU_SRAM_SPD_BPM_RTC_BASE			21
#define	SEAGULL_CPU_SRAM_SPD_DC_DIRTY_WTC_MSK		SHIFT18(0x7)	/* DC Dirty WTC */
#define	SEAGULL_CPU_SRAM_SPD_DC_DIRTY_WTC_BASE		18
#define	SEAGULL_CPU_SRAM_SPD_DC_DIRTY_RTC_MSK		SHIFT16(0x3)	/* DC Dirty RTC */
#define	SEAGULL_CPU_SRAM_SPD_DC_DIRTY_RTC_BASE		16
#define	SEAGULL_CPU_SRAM_SPD_DC_TAG_WTC_MSK			SHIFT13(0x7)	/* DC Tag WTC */
#define	SEAGULL_CPU_SRAM_SPD_DC_TAG_WTC_BASE		13
#define	SEAGULL_CPU_SRAM_SPD_DC_TAG_RTC_MSK			SHIFT11(0x3)	/* DC Tag RTC */
#define	SEAGULL_CPU_SRAM_SPD_DC_TAG_RTC_BASE		11
#define	SEAGULL_CPU_SRAM_SPD_DC_DATA_RTC_MSK		SHIFT8(0x7)		/* DC Data RTC */
#define	SEAGULL_CPU_SRAM_SPD_DC_DATA_RTC_BASE		8
#define	SEAGULL_CPU_SRAM_SPD_IC_TAG_WTC_MSK			SHIFT5(0x7)		/* IC Tag WTC */
#define	SEAGULL_CPU_SRAM_SPD_IC_TAG_WTC_BASE		5
#define	SEAGULL_CPU_SRAM_SPD_IC_TAG_RTC_MSK			SHIFT3(0x3)		/* IC Tag RTC */
#define	SEAGULL_CPU_SRAM_SPD_IC_TAG_RTC_BASE		3
#define	SEAGULL_CPU_SRAM_SPD_IC_DATA_RTC_MSK		SHIFT0(0x7)		/* IC Data RTC */
#define	SEAGULL_CPU_SRAM_SPD_IC_DATA_RTC_BASE		0

/*	MOHAWK_CPU_SRAM_SPD				0x0010	<var Processor: Mohawk> CPU SRAM
 *											Speed Config Register
 */
/*		Bit(s) MOHAWK_CPU_SRAM_SPD_RSRV_ reserved */
#define	MOHAWK_CPU_SRAM_SPD_TLB_WTC_MSK				SHIFT26(0x7)	/* TLB WTC */
#define	MOHAWK_CPU_SRAM_SPD_TLB_WTC_BASE			26
#define	MOHAWK_CPU_SRAM_SPD_TLB_RTC_MSK				SHIFT24(0x3)	/* TLB RTC */
#define	MOHAWK_CPU_SRAM_SPD_TLB_RTC_BASE			24
#define	MOHAWK_CPU_SRAM_SPD_BPM_WTC_MSK				SHIFT21(0x7)	/* BPM WTC */
#define	MOHAWK_CPU_SRAM_SPD_BPM_WTC_BASE			21
#define	MOHAWK_CPU_SRAM_SPD_BPM_RTC_MSK				SHIFT19(0x3)	/* BPM RTC */
#define	MOHAWK_CPU_SRAM_SPD_BPM_RTC_BASE			19
#define	MOHAWK_CPU_SRAM_SPD_DC_DIRTY_WTC_MSK		SHIFT16(0x7)	/* DC Dirty WTC */
#define	MOHAWK_CPU_SRAM_SPD_DC_DIRTY_WTC_BASE		16
#define	MOHAWK_CPU_SRAM_SPD_DC_DIRTY_RTC_MSK		SHIFT14(0x3)	/* DC Dirty RTC */
#define	MOHAWK_CPU_SRAM_SPD_DC_DIRTY_RTC_BASE		14
#define	MOHAWK_CPU_SRAM_SPD_DC_TAG_WTC_MSK			SHIFT11(0x7)	/* DC Tag WTC */
#define	MOHAWK_CPU_SRAM_SPD_DC_TAG_WTC_BASE			11
#define	MOHAWK_CPU_SRAM_SPD_DC_TAG_RTC_MSK			SHIFT9(0x3)		/* DC TAG RTC */
#define	MOHAWK_CPU_SRAM_SPD_DC_TAG_RTC_BASE			9
#define	MOHAWK_CPU_SRAM_SPD_DC_DATA_RTC_MSK			SHIFT6(0x7)		/* DC Data RTC */
#define	MOHAWK_CPU_SRAM_SPD_DC_DATA_RTC_BASE		6
#define	MOHAWK_CPU_SRAM_SPD_IC_TAG_RTC_MSK			SHIFT3(0x7)		/* IC Tag RTC */
#define	MOHAWK_CPU_SRAM_SPD_IC_TAG_RTC_BASE			3
#define	MOHAWK_CPU_SRAM_SPD_IC_DATA_RTC_MSK			SHIFT0(0x7)		/* IC Data RTC */
#define	MOHAWK_CPU_SRAM_SPD_IC_DATA_RTC_BASE		0

/*	SEAGULL_CPU_L2C_SRAM_SPD		0x0014	<var Processor: Osprey> CPU L2
 *											Cache SRAM Speed Config Register
 */
/*		Bit(s) SEAGULL_CPU_L2C_SRAM_SPD_RSRV_ reserved */
/* Data RAM RTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_DATA_RAM_RTC_MSK		SHIFT28(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_DATA_RAM_RTC_BASE		28
/* Data RAM WTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_DATA_RAM_WTC_MSK		SHIFT26(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_DATA_RAM_WTC_BASE		26
/* Dirty RAM RTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_DIRTY_RAM_RTC_MSK		SHIFT24(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_DIRTY_RAM_RTC_BASE		24
/* Dirty RAM WTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_DIRTY_RAM_WTC_MSK		SHIFT21(0x7)
#define	SEAGULL_CPU_L2C_SRAM_SPD_DIRTY_RAM_WTC_BASE		21
/*		Bit(s) SEAGULL_CPU_L2C_SRAM_SPD_RSRV_ reserved */
/* ECC RAM RTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_ECC_RAM_RTC_MSK		SHIFT18(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_ECC_RAM_RTC_BASE		18
/* ECC RAM WTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_ECC_RAM_WTC_MSK		SHIFT16(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_ECC_RAM_WTC_BASE		16
/*		Bit(s) SEAGULL_CPU_L2C_SRAM_SPD_RSRV_ reserved */
/* Tag RAM RTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_TAG_RAM_RTC_MSK		SHIFT13(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_TAG_RAM_RTC_BASE		13
/* Tag RAM WTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_TAG_RAM_WTC_MSK		SHIFT10(0x7)
#define	SEAGULL_CPU_L2C_SRAM_SPD_TAG_RAM_WTC_BASE		10
/* Valid RAM RTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_VALID_RAM_RTC_MSK		SHIFT8(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_VALID_RAM_RTC_BASE		8
/* Valid RAM WTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_VALID_RAM_WTC_MSK		SHIFT5(0x7)
#define	SEAGULL_CPU_L2C_SRAM_SPD_VALID_RAM_WTC_BASE		5
/* Lock RAM RTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_LOCK_RAM_RTC_MSK		SHIFT3(0x3)
#define	SEAGULL_CPU_L2C_SRAM_SPD_LOCK_RAM_RTC_BASE		3
/* Lock RAM WTC */
#define	SEAGULL_CPU_L2C_SRAM_SPD_LOCK_RAM_WTC_MSK		SHIFT0(0x7)
#define	SEAGULL_CPU_L2C_SRAM_SPD_LOCK_RAM_WTC_BASE		0

/*	MOHAWK_CPU_L2C_SRAM_SPD			0x0018	<var Processor: Mohawk> CPU L2
 *											Cache SRAM Speed Config Register
 */
/*		Bit(s) MOHAWK_CPU_L2C_SRAM_SPD_RSRV_ reserved */
/* Data RAM RTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_DATA_RAM_RTC_MSK		SHIFT28(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_DATA_RAM_RTC_BASE		28
/* Data RAM WTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_DATA_RAM_WTC_MSK		SHIFT26(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_DATA_RAM_WTC_BASE		26
/* Dirty RAM RTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_DIRTY_RAM_RTC_MSK		SHIFT24(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_DIRTY_RAM_RTC_BASE		24
/* Dirty RAM WTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_DIRTY_RAM_WTC_MSK		SHIFT21(0x7)
#define	MOHAWK_CPU_L2C_SRAM_SPD_DIRTY_RAM_WTC_BASE		21
/* L2 cache clockg gating enable */
#define	MOHAWK_CPU_L2C_SRAM_SPD_L2C_CG_EN				BIT_20
/* ECC RAM RTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_ECC_RAM_RTC_MSK			SHIFT18(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_ECC_RAM_RTC_BASE		18
/* ECC RAM WTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_ECC_RAM_WTC_MSK			SHIFT16(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_ECC_RAM_WTC_BASE		16
/*		Bit(s) MOHAWK_CPU_L2C_SRAM_SPD_RSRV_ reserved */
/* Tag RAM RTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_TAG_RAM_RTC_MSK			SHIFT13(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_TAG_RAM_RTC_BASE		13
/* Tag RAM WTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_TAG_RAM_WTC_MSK			SHIFT10(0x7)
#define	MOHAWK_CPU_L2C_SRAM_SPD_TAG_RAM_WTC_BASE		10
/* Valid RAM RTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_VALID_RAM_RTC_MSK		SHIFT8(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_VALID_RAM_RTC_BASE		8
/* Valid RAM WTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_VALID_RAM_WTC_MSK		SHIFT5(0x7)
#define	MOHAWK_CPU_L2C_SRAM_SPD_VALID_RAM_WTC_BASE		5
/* Lock RAM RTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_LOCK_RAM_RTC_MSK		SHIFT3(0x3)
#define	MOHAWK_CPU_L2C_SRAM_SPD_LOCK_RAM_RTC_BASE		3
/* Lock RAM WTC */
#define	MOHAWK_CPU_L2C_SRAM_SPD_LOCK_RAM_WTC_MSK		SHIFT0(0x7)
#define	MOHAWK_CPU_L2C_SRAM_SPD_LOCK_RAM_WTC_BASE		0

/*	SYS_BOOT_CNTRL					0x0020	System Boot Control Register */
/*		Bit(s) SYS_BOOT_CNTRL_RSRV_ reserved */
/* Boot Platform State */
#define	SYS_BOOT_CNTRL_BOOT_PLTFM_STATE_MSK			SHIFT22(0xf)
#define	SYS_BOOT_CNTRL_BOOT_PLTFM_STATE_BASE		22
/* Secure Download Enable */
#define	SYS_BOOT_CNTRL_SDE							BIT_21
/* Secure Boot Enable */
#define	SYS_BOOT_CNTRL_SBE							BIT_20
/* Download Disable */
#define	SYS_BOOT_CNTRL_DOWNLOAD_DISABLE				BIT_19
/* Secure Key Access Disable */
#define	SYS_BOOT_CNTRL_SKEY_ACCESS_DISABLE			BIT_18
/* No NAND Device */
#define	SYS_BOOT_CNTRL_NO_NAND_DEVICE				BIT_17
#define	SYS_BOOT_CNTRL_USB_WAKEUP					BIT_16			/* USB Wakeup */
/* Boot from Status after Chip Reset */
#define	SYS_BOOT_CNTRL_BOOT_FROM					BIT_15
/*		Bit(s) SYS_BOOT_CNTRL_RSRV_ reserved */
/* Download from USB Port */
#define	SYS_BOOT_CNTRL_USB_PORT						BIT_13
/* Download from UART Port */
#define	SYS_BOOT_CNTRL_UART_PORT					BIT_12
/*		Bit(s) SYS_BOOT_CNTRL_RSRV_ reserved */
#define	SYS_BOOT_CNTRL_JTAG_DISABLE					BIT_6			/* JTAG Disable */
/*		Bit(s) SYS_BOOT_CNTRL_RSRV_ reserved */
/* NAND Chip Select Active High */
#define	SYS_BOOT_CNTRL_NCSAH_MSK					SHIFT1(0xf)
#define	SYS_BOOT_CNTRL_NCSAH_BASE					1
#define	SYS_BOOT_CNTRL_DEBUG_EN						BIT_0			/* Debug Enable */

/*	SW_BRANCH_ADDR					0x0024	Software Branch Address Register */
#define	SW_BRANCH_ADDR_BRANCH_ADDR_MSK		SHIFT0(0xffffffff)	/* Branch Address */
#define	SW_BRANCH_ADDR_BRANCH_ADDR_BASE		0

/*	PERF_COUNT0_CNTRL_A				0x0028	Performance Counter 0 Control
 *											Register A
 */
/*		Bit(s) PERF_COUNT0_CNTRL_A_RSRV_ reserved */
/* do not use */
#define	PERF_COUNT0_CNTRL_A_BLANK__MSK				SHIFT8(0x7)
#define	PERF_COUNT0_CNTRL_A_BLANK__BASE				8
/* Read Byte Count Enable */
#define	PERF_COUNT0_CNTRL_A_S0_RD_BYTE_COUNT_EN		BIT_2
/* Write Byte Count Enable */
#define	PERF_COUNT0_CNTRL_A_S0_WR_BYTE_COUNT_EN		BIT_1
/* Clear Counter */
#define	PERF_COUNT0_CNTRL_A_CLR_COUNT				BIT_0

/*	PERF_COUNT1_CNTRL_A				0x002C	Performance Counter 1 Control
 *											Register A
 */
/*		Bit(s) PERF_COUNT1_CNTRL_A_RSRV_ reserved */
/* do not use */
#define	PERF_COUNT1_CNTRL_A_BLANK__MSK				SHIFT8(0x7)
#define	PERF_COUNT1_CNTRL_A_BLANK__BASE				8
/* Read Byte Count Enable */
#define	PERF_COUNT1_CNTRL_A_S5_RD_BYTE_COUNT_EN		BIT_2
/* Write Byte Count Enable */
#define	PERF_COUNT1_CNTRL_A_S5_WR_BYTE_COUNT_EN		BIT_1
/* Clear Counter */
#define	PERF_COUNT1_CNTRL_A_CLR_COUNT				BIT_0

/*	PERF_COUNT2_CNTRL				0x0030	Performance Counter 2 Control
 *											Register
 */
/*		Bit(s) PERF_COUNT2_CNTRL_RSRV_ reserved */
/* Read Byte Count Enable */
#define	PERF_COUNT2_CNTRL_S7_RD_BYTE_COUNT_EN		BIT_2
/* Write Byte Count Enable */
#define	PERF_COUNT2_CNTRL_S7_WR_BYTE_COUNT_EN		BIT_1
/* Clear Counter */
#define	PERF_COUNT2_CNTRL_CLR_COUNT					BIT_0

/*	PERF_COUNT0						0x0034	Performance Count 0 Register */
/* Performance Count Value */
#define	PERF_COUNT0_COUT_VALUE_MSK		SHIFT0(0xffffffff)
#define	PERF_COUNT0_COUT_VALUE_BASE		0

/*	PERF_COUNT1						0x0038	Performance Count 1 Register */
/* Performance Count Value */
#define	PERF_COUNT1_COUT_VALUE_MSK		SHIFT0(0xffffffff)
#define	PERF_COUNT1_COUT_VALUE_BASE		0

/*	PERF_COUNT2						0x003C	Performance Count 2 Register */
/* Performance Count Value */
#define	PERF_COUNT2_COUT_VALUE_MSK		SHIFT0(0xffffffff)
#define	PERF_COUNT2_COUT_VALUE_BASE		0

/*	MC_CONF							0x0040	Memory Controller Configuration
 *											Register
 */
/*		Bit(s) MC_CONF_RSRV_ reserved */
/* Memory Controller PHY DLL Disable */
#define	MC_CONF_MC_PHY_DLL_DIS		BIT_1
/* Memory Controller PHY PLL Disable */
#define	MC_CONF_MC_PHY_PLL_DIS		BIT_0

/*	U3_CONF							0x0048	Memory Controller Configuration
 *											Register 2
 */
/*		Bit(s) U3_CONF_RSRV_ reserved */
/* USB3 SRAM S/W controllable WTC */
#define	U3_CONF_U3SRAM_WTC_MSK		SHIFT18(0x3)
#define	U3_CONF_U3SRAM_WTC_BASE		18
/* USB3 SRAM S/W controllable RTC */
#define	U3_CONF_U3SRAM_RTC_MSK		SHIFT16(0x3)
#define	U3_CONF_U3SRAM_RTC_BASE		16
/*		Bit(s) U3_CONF_RSRV_ reserved */

/*	AXI2MC0_CTRL					0x0050	AXI2MC0 Control Register */
/*		Bit(s) AXI2MC0_CTRL_RSRV_ reserved */
/* page arbitration timeout enable */
#define	AXI2MC0_CTRL_PAGE_ARB_TIMEOUT_EN				BIT_25
/* page arbitration enable */
#define	AXI2MC0_CTRL_PAGE_ARB_EN						BIT_24
/* read channel page timeout value */
#define	AXI2MC0_CTRL_RD_PAGE_TIMEOUT_VAL_MSK			SHIFT20(0xf)
#define	AXI2MC0_CTRL_RD_PAGE_TIMEOUT_VAL_BASE			20
/* write channel page timeout value */
#define	AXI2MC0_CTRL_WR_PAGE_TIMEOUT_VAL_MSK			SHIFT16(0xf)
#define	AXI2MC0_CTRL_WR_PAGE_TIMEOUT_VAL_BASE			16
/* read priority enable */
#define	AXI2MC0_CTRL_RD_PRIORITY_EN						BIT_15
/* write request queue lock arbiter value */
#define	AXI2MC0_CTRL_WR_REQ_QU_LOCK_ARB_VAL_MSK			SHIFT12(0x7)
#define	AXI2MC0_CTRL_WR_REQ_QU_LOCK_ARB_VAL_BASE		12
/* fast queue enable */
#define	AXI2MC0_CTRL_FAST_QU_ENABLE						BIT_11
/* DCLK clock gate enable */
#define	AXI2MC0_CTRL_DCLK_GATE_EN						BIT_10
/* AXI clock gate enable */
#define	AXI2MC0_CTRL_ACLK_GATE_EN						BIT_9
/* Request Queue Half Enable Read Channel */
#define	AXI2MC0_CTRL_REQ_QU_HALF_EN_RD_CH				BIT_8
/* Request Queue Half Enable Write Channel */
#define	AXI2MC0_CTRL_REQ_QU_HALF_EN_WR_CH				BIT_7
/* FIFO Single Sync Stage Enable */
#define	AXI2MC0_CTRL_FIFO_1STAGE_SYNC_EN				BIT_6
/* FIFO Sync Mode Enable */
#define	AXI2MC0_CTRL_FIFO_SYNC_MODE_EN					BIT_5
/* Dynamic Clock Stop Enable */
#define	AXI2MC0_CTRL_CLK_STOP_EN						BIT_4
/* RAM Read Timing Control */
#define	AXI2MC0_CTRL_RAM_RTC_MSK						SHIFT2(0x3)
#define	AXI2MC0_CTRL_RAM_RTC_BASE						2
/* RAM Write Timing Control */
#define	AXI2MC0_CTRL_RAM_WTC_MSK						SHIFT0(0x3)
#define	AXI2MC0_CTRL_RAM_WTC_BASE						0

/*	AXI2MC2_CTRL					0x005C	AXI2MC2 Control Register */
/*		Bit(s) AXI2MC2_CTRL_RSRV_ reserved */
/* page arbitration timeout enable */
#define	AXI2MC2_CTRL_PAGE_ARB_TIMEOUT_EN				BIT_25
/* page arbitration enable */
#define	AXI2MC2_CTRL_PAGE_ARB_EN						BIT_24
/* read channel page timeout value */
#define	AXI2MC2_CTRL_RD_PAGE_TIMEOUT_VAL_MSK			SHIFT20(0xf)
#define	AXI2MC2_CTRL_RD_PAGE_TIMEOUT_VAL_BASE			20
/* write channel page timeout value */
#define	AXI2MC2_CTRL_WR_PAGE_TIMEOUT_VAL_MSK			SHIFT16(0xf)
#define	AXI2MC2_CTRL_WR_PAGE_TIMEOUT_VAL_BASE			16
/* read priority enable */
#define	AXI2MC2_CTRL_RD_PRIORITY_EN						BIT_15
/* write request queue lock arbiter value */
#define	AXI2MC2_CTRL_WR_REQ_QU_LOCK_ARB_VAL_MSK			SHIFT12(0x7)
#define	AXI2MC2_CTRL_WR_REQ_QU_LOCK_ARB_VAL_BASE		12
/* fast queue enable */
#define	AXI2MC2_CTRL_FAST_QU_ENABLE						BIT_11
/* DCLK clock gate enable */
#define	AXI2MC2_CTRL_DCLK_GATE_EN						BIT_10
/* AXI clock gate enable */
#define	AXI2MC2_CTRL_ACLK_GATE_EN						BIT_9
/* Request Queue Half Enable Read Channel */
#define	AXI2MC2_CTRL_REQ_QU_HALF_EN_RD_CH				BIT_8
/* Request Queue Half Enable Write Channel */
#define	AXI2MC2_CTRL_REQ_QU_HALF_EN_WR_CH				BIT_7
/* FIFO Single Sync Stage Enable */
#define	AXI2MC2_CTRL_FIFO_1STAGE_SYNC_EN				BIT_6
/* FIFO Sync Mode Enable */
#define	AXI2MC2_CTRL_FIFO_SYNC_MODE_EN					BIT_5
/* Dynamic Clock Stop Enable */
#define	AXI2MC2_CTRL_CLK_STOP_EN						BIT_4
/* RAM Read Timing Control */
#define	AXI2MC2_CTRL_RAM_RTC_MSK						SHIFT2(0x3)
#define	AXI2MC2_CTRL_RAM_RTC_BASE						2
/* RAM Write Timing Control */
#define	AXI2MC2_CTRL_RAM_WTC_MSK						SHIFT0(0x3)
#define	AXI2MC2_CTRL_RAM_WTC_BASE						0

/*	PERF_COUNT3						0x0074	Performance Count 3 Register */
/* Performance Count Value */
#define	PERF_COUNT3_COUT_VALUE_MSK		SHIFT0(0xffffffff)
#define	PERF_COUNT3_COUT_VALUE_BASE		0

/*	PERF_COUNT3_CNTRL_A				0x0078	Performance Counter 3 Control
 *											Register A
 */
/*		Bit(s) PERF_COUNT3_CNTRL_A_RSRV_ reserved */
/* Read Byte Count Enable */
#define	PERF_COUNT3_CNTRL_A_GC_RD_BYTE_COUNT_EN		BIT_2
/* Write Byte Count Enable */
#define	PERF_COUNT3_CNTRL_A_GC_WR_BYTE_COUNT_EN		BIT_1
/* Clear Counter */
#define	PERF_COUNT3_CNTRL_A_CLR_COUNT				BIT_0

/*	PERF_COUNT0_CNTRL_B				0x007C	Performance Counter 0 Control
 *											Register B
 */
/*		Bit(s) PERF_COUNT0_CNTRL_B_RSRV_ reserved */
/* Fast Queue Threshold for Count */
#define	PERF_COUNT0_CNTRL_B_F_QU_THRE_MSK				SHIFT12(0x3)
#define	PERF_COUNT0_CNTRL_B_F_QU_THRE_BASE				12
/* Fast Queue Below Threshold Count Enable */
#define	PERF_COUNT0_CNTRL_B_F_QU_BEL_THRE_CNT_EN		BIT_11
/* Fast Queue Threshold Count Enable */
#define	PERF_COUNT0_CNTRL_B_F_QU_ABV_THRE_CNT_EN		BIT_10
/* Queue Threshold for Count */
#define	PERF_COUNT0_CNTRL_B_QU_THRE_MSK					SHIFT7(0x7)
#define	PERF_COUNT0_CNTRL_B_QU_THRE_BASE				7
/* Queue Below Threshold Count Enable */
#define	PERF_COUNT0_CNTRL_B_QU_BEL_THRE_CNT_EN			BIT_6
/* Queue Threshold Count Enable */
#define	PERF_COUNT0_CNTRL_B_QU_ABV_THRE_CNT_EN			BIT_5
/* Fast Queue Full Count Enable */
#define	PERF_COUNT0_CNTRL_B_F_QU_FULL_CNT_EN			BIT_4
/* Queue Full Count Enable */
#define	PERF_COUNT0_CNTRL_B_QU_FULL_CNT_EN				BIT_3
/* Fast Queue Empty Count Enable */
#define	PERF_COUNT0_CNTRL_B_F_QU_EMPTY_CNT_EN			BIT_2
/* Queue Empty Count Enable */
#define	PERF_COUNT0_CNTRL_B_QU_EMPTY_CNT_EN				BIT_1
/* Queue Idle Count Enable */
#define	PERF_COUNT0_CNTRL_B_QU_IDLE_CNT_EN				BIT_0

/*	PERF_COUNT1_CNTRL_B				0x0080	Performance Counter 1 Control
 *											Register B
 */
/*		Bit(s) PERF_COUNT1_CNTRL_B_RSRV_ reserved */
/* Fast Queue Threshold for Count */
#define	PERF_COUNT1_CNTRL_B_F_QU_THRE_MSK				SHIFT12(0x3)
#define	PERF_COUNT1_CNTRL_B_F_QU_THRE_BASE				12
/* Fast Queue Below Threshold Count Enable */
#define	PERF_COUNT1_CNTRL_B_F_QU_BEL_THRE_CNT_EN		BIT_11
/* Fast Queue Threshold Count Enable */
#define	PERF_COUNT1_CNTRL_B_F_QU_ABV_THRE_CNT_EN		BIT_10
/* Queue Threshold for Count */
#define	PERF_COUNT1_CNTRL_B_QU_THRE_MSK					SHIFT7(0x7)
#define	PERF_COUNT1_CNTRL_B_QU_THRE_BASE				7
/* Queue Below Threshold Count Enable */
#define	PERF_COUNT1_CNTRL_B_QU_BEL_THRE_CNT_EN			BIT_6
/* Queue Threshold Count Enable */
#define	PERF_COUNT1_CNTRL_B_QU_ABV_THRE_CNT_EN			BIT_5
/* Fast Queue Full Count Enable */
#define	PERF_COUNT1_CNTRL_B_F_QU_FULL_CNT_EN			BIT_4
/* Queue Full Count Enable */
#define	PERF_COUNT1_CNTRL_B_QU_FULL_CNT_EN				BIT_3
/* Fast Queue Empty Count Enable */
#define	PERF_COUNT1_CNTRL_B_F_QU_EMPTY_CNT_EN			BIT_2
/* Queue Empty Count Enable */
#define	PERF_COUNT1_CNTRL_B_QU_EMPTY_CNT_EN				BIT_1
/* Queue Idle Count Enable */
#define	PERF_COUNT1_CNTRL_B_QU_IDLE_CNT_EN				BIT_0

/*	PERF_COUNT2_CNTRL_B				0x0084	Performance Counter 2 Control
 *											Register B
 */
/*		Bit(s) PERF_COUNT2_CNTRL_B_RSRV_ reserved */
/* Fast Queue Threshold for Count */
#define	PERF_COUNT2_CNTRL_B_F_QU_THRE_MSK				SHIFT12(0x3)
#define	PERF_COUNT2_CNTRL_B_F_QU_THRE_BASE				12
/* Fast Queue Below Threshold Count Enable */
#define	PERF_COUNT2_CNTRL_B_F_QU_BEL_THRE_CNT_EN		BIT_11
/* Fast Queue Threshold Count Enable */
#define	PERF_COUNT2_CNTRL_B_F_QU_ABV_THRE_CNT_EN		BIT_10
/* Queue Threshold for Count */
#define	PERF_COUNT2_CNTRL_B_QU_THRE_MSK					SHIFT7(0x7)
#define	PERF_COUNT2_CNTRL_B_QU_THRE_BASE				7
/* Queue Below Threshold Count Enable */
#define	PERF_COUNT2_CNTRL_B_QU_BEL_THRE_CNT_EN			BIT_6
/* Queue Threshold Count Enable */
#define	PERF_COUNT2_CNTRL_B_QU_ABV_THRE_CNT_EN			BIT_5
/* Fast Queue Full Count Enable */
#define	PERF_COUNT2_CNTRL_B_F_QU_FULL_CNT_EN			BIT_4
/* Queue Full Count Enable */
#define	PERF_COUNT2_CNTRL_B_QU_FULL_CNT_EN				BIT_3
/* Fast Queue Empty Count Enable */
#define	PERF_COUNT2_CNTRL_B_F_QU_EMPTY_CNT_EN			BIT_2
/* Queue Empty Count Enable */
#define	PERF_COUNT2_CNTRL_B_QU_EMPTY_CNT_EN				BIT_1
/* Queue Idle Count Enable */
#define	PERF_COUNT2_CNTRL_B_QU_IDLE_CNT_EN				BIT_0

/*	PERF_COUNT3_CNTRL_B				0x0088	Performance Counter 3 Control
 *											Register B
 */
/*		Bit(s) PERF_COUNT3_CNTRL_B_RSRV_ reserved */
/* counter update enable */
#define	PERF_COUNT3_CNTRL_B_CNT_UPDATE_EN				BIT_16
/*		Bit(s) PERF_COUNT3_CNTRL_B_RSRV_ reserved */
/* Fast Queue Threshold for Count */
#define	PERF_COUNT3_CNTRL_B_F_QU_THRE_MSK				SHIFT12(0x3)
#define	PERF_COUNT3_CNTRL_B_F_QU_THRE_BASE				12
/* Fast Queue Below Threshold Count Enable */
#define	PERF_COUNT3_CNTRL_B_F_QU_BEL_THRE_CNT_EN		BIT_11
/* Fast Queue Threshold Count Enable */
#define	PERF_COUNT3_CNTRL_B_F_QU_ABV_THRE_CNT_EN		BIT_10
/* Queue Threshold for Count */
#define	PERF_COUNT3_CNTRL_B_QU_THRE_MSK					SHIFT7(0x7)
#define	PERF_COUNT3_CNTRL_B_QU_THRE_BASE				7
/* Queue Below Threshold Count Enable */
#define	PERF_COUNT3_CNTRL_B_QU_BEL_THRE_CNT_EN			BIT_6
/* Queue Threshold Count Enable */
#define	PERF_COUNT3_CNTRL_B_QU_ABV_THRE_CNT_EN			BIT_5
/* Fast Queue Full Count Enable */
#define	PERF_COUNT3_CNTRL_B_F_QU_FULL_CNT_EN			BIT_4
/* Queue Full Count Enable */
#define	PERF_COUNT3_CNTRL_B_QU_FULL_CNT_EN				BIT_3
/* Fast Queue Empty Count Enable */
#define	PERF_COUNT3_CNTRL_B_F_QU_EMPTY_CNT_EN			BIT_2
/* Queue Empty Count Enable */
#define	PERF_COUNT3_CNTRL_B_QU_EMPTY_CNT_EN				BIT_1
/* Queue Idle Count Enable */
#define	PERF_COUNT3_CNTRL_B_QU_IDLE_CNT_EN				BIT_0

/*	DDR_PHY_TST_CONFIG				0x0090	DDR PHY TEST Configuration register */
/*		Bit(s) DDR_PHY_TST_CONFIG_RSRV_ reserved */
/* DDR Phy LB Control RLD */
#define	DDR_PHY_TST_CONFIG_DDR_PHY_LB_CNTRL_RLD_MSK			SHIFT5(0xffff)
#define	DDR_PHY_TST_CONFIG_DDR_PHY_LB_CNTRL_RLD_BASE		5
/* DDR Phy signal select */
#define	DDR_PHY_TST_CONFIG_DDR_PHY_SIG_SEL_MSK				SHIFT2(0x7)
#define	DDR_PHY_TST_CONFIG_DDR_PHY_SIG_SEL_BASE				2
/* DDR Phy LB test enable */
#define	DDR_PHY_TST_CONFIG_DDR_PHY_LB_TST_EN				BIT_1
/* DDR phy LB test mode */
#define	DDR_PHY_TST_CONFIG_DDR_PHY_LB_TST_MODE				BIT_0

/*	DDR_PHY_TST_SEED				0x0094	DDR PHY TEST Seed register */
/* DDR Phy LB seed */
#define	DDR_PHY_TST_SEED_DDR_PHY_LB_SEED_MSK		SHIFT0(0xffffffff)
#define	DDR_PHY_TST_SEED_DDR_PHY_LB_SEED_BASE		0

/*	DDR_PHY_TST_SIGNATURE			0x0098	DDR PHY TEST Signature register */
/* DDR Phy signature */
#define	DDR_PHY_TST_SIGNATURE_DDR_PHY_SIG_MSK		SHIFT0(0xffffffff)
#define	DDR_PHY_TST_SIGNATURE_DDR_PHY_SIG_BASE		0

/*	DDR_PHY_TST_STATUS				0x009C	DDR PHY TEST status register */
/*		Bit(s) DDR_PHY_TST_STATUS_RSRV_ reserved */
/* DDR Phy LB test reset cmp */
#define	DDR_PHY_TST_STATUS_DDR_PHY_LB_TST_RST_CMP		BIT_1
/* DDR Phy LB test cmp */
#define	DDR_PHY_TST_STATUS_DDR_PHY_LB_TST_CMP			BIT_0

/*	CR5_CONF						0x00A0	<var Processor: Osprey> CPU
 *											Configuration Register
 */
/*		Bit(s) CR5_CONF_RSRV_ reserved */
#define	CR5_CONF_SLBTCMSB0		BIT_14				/* B1TCM selection */
#define	CR5_CONF_NCPUHALT0		BIT_13				/* Processor halt after reset */
#define	CR5_CONF_CFGNMFI0		BIT_12				/* Nonmaskable FI enable */
#define	CR5_CONF_LOCZRAMA0		BIT_11				/* TCM location */
#define	CR5_CONF_INITRAMB0		BIT_10				/* BTCM0 enable */
#define	CR5_CONF_INITRAMA0		BIT_9				/* ATCM0 enable */
#define	CR5_CONF_VINITHI0		BIT_8				/* Vector Init High */
/*		Bit(s) CR5_CONF_RSRV_ reserved */
#define	CR5_CONF_TEINIT			BIT_6				/* Reset TE-bit value */
#define	CR5_CONF_CFGIE			BIT_5				/* Instruction side endianness, */
#define	CR5_CONF_CFGEE			BIT_4				/* Reset EE-bit value */
/*		Bit(s) CR5_CONF_RSRV_ reserved */

/*	CR5_SRAM_CONF					0x00A4	<var Processor: Osprey> SRAM
 *											Timing Configuration Register
 */
/* L1 icache TAG sram read timing */
#define	CR5_SRAM_CONF_ITAG_RTC_MSK			SHIFT30(0x3)
#define	CR5_SRAM_CONF_ITAG_RTC_BASE			30
/* L1 icache TAG sram write timing */
#define	CR5_SRAM_CONF_ITAG_WTC_MSK			SHIFT28(0x3)
#define	CR5_SRAM_CONF_ITAG_WTC_BASE			28
/* L1 icache DATA read timing */
#define	CR5_SRAM_CONF_IDATA_RTC_MSK			SHIFT26(0x3)
#define	CR5_SRAM_CONF_IDATA_RTC_BASE		26
/* L1 icache DATA write timing */
#define	CR5_SRAM_CONF_IDATA_WTC_MSK			SHIFT24(0x3)
#define	CR5_SRAM_CONF_IDATA_WTC_BASE		24
/* L1 dcache dirty read timing */
#define	CR5_SRAM_CONF_DDIRTY_RTC_MSK		SHIFT22(0x3)
#define	CR5_SRAM_CONF_DDIRTY_RTC_BASE		22
/* L1 dcache dirty write timing */
#define	CR5_SRAM_CONF_DDIRTY_WTC_MSK		SHIFT20(0x3)
#define	CR5_SRAM_CONF_DDIRTY_WTC_BASE		20
/* L1 dcache tag sram read timing */
#define	CR5_SRAM_CONF_DTAG_RTC_MSK			SHIFT18(0x3)
#define	CR5_SRAM_CONF_DTAG_RTC_BASE			18
/* L1 dcache tag sram write timing */
#define	CR5_SRAM_CONF_DTAG_WTC_MSK			SHIFT16(0x3)
#define	CR5_SRAM_CONF_DTAG_WTC_BASE			16
/* L1 dcache data sram read timing */
#define	CR5_SRAM_CONF_DDATA_RTC_MSK			SHIFT14(0x3)
#define	CR5_SRAM_CONF_DDATA_RTC_BASE		14
/* L1 dcache data sram write timing */
#define	CR5_SRAM_CONF_DDATA_WTC_MSK			SHIFT12(0x3)
#define	CR5_SRAM_CONF_DDATA_WTC_BASE		12
/* BTCM sram read timing */
#define	CR5_SRAM_CONF_BTCM_RTC_MSK			SHIFT0(0xfff)
#define	CR5_SRAM_CONF_BTCM_RTC_BASE			0

/*	CR5_PPX_CONF					0x00A8	<var Processor: Osprey> AXI
 *											peripheral interface Configuration Register
 */
/* Base address of AXI peripheral interface */
#define	CR5_PPX_CONF_PPXBASE0_MSK		SHIFT12(0xfffff)
#define	CR5_PPX_CONF_PPXBASE0_BASE		12
/*		Bit(s) CR5_PPX_CONF_RSRV_ reserved */
/* AXI peripheral interface enable */
#define	CR5_PPX_CONF_INITPPX0			BIT_5
/* Base address of AXI peripheral interface */
#define	CR5_PPX_CONF_PPXSIZE0_MSK		SHIFT0(0x1f)
#define	CR5_PPX_CONF_PPXSIZE0_BASE		0

/*	CR5_PPV_CONF					0x00AC	<var Processor: Osprey>
 *											Virtual-AXI peripheral interface Configuration
 *											Register
 */
/* Base address of Virtual-AXI peripheral interface */
#define	CR5_PPV_CONF_PPVBASE0_MSK		SHIFT12(0xfffff)
#define	CR5_PPV_CONF_PPVBASE0_BASE		12
/*		Bit(s) CR5_PPV_CONF_RSRV_ reserved */
/* Base address of Virtual-AXI peripheral interface */
#define	CR5_PPV_CONF_PPXSIZE0_MSK				SHIFT0(0x1f)
#define	CR5_PPV_CONF_PPXSIZE0_BASE				0

/*	SEAGULL_L2C_ADDR_FILTER_CONF	0x00B0	<var Processor: Osprey> L2C
 *											Address Filter Config Register
 */
/* Addr filter enable */
#define	SEAGULL_L2C_ADDR_FILTER_CONF_SEAGULL_L2C_FILTER_EN						BIT_31
/*		Bit(s) SEAGULL_L2C_ADDR_FILTER_CONF_RSRV_ reserved */
/* Addr filter end address */
#define	SEAGULL_L2C_ADDR_FILTER_CONF_SEAGULL_L2C_FILTER_END_MSK			SHIFT16(0xfff)
#define	SEAGULL_L2C_ADDR_FILTER_CONF_SEAGULL_L2C_FILTER_END_BASE			16
/*		Bit(s) SEAGULL_L2C_ADDR_FILTER_CONF_RSRV_ reserved */
/* Addr filter start address */
#define	SEAGULL_L2C_ADDR_FILTER_CONF_SEAGULL_L2C_FILTER_START_MSK		SHIFT0(0xfff)
#define	SEAGULL_L2C_ADDR_FILTER_CONF_SEAGULL_L2C_FILTER_START_BASE		0

/*	SEAGULL_L2C_CONF				0x00B4	<var Processor: Osprey> L2C Config
 *											Register
 */
/* L2C Register base address */
#define	SEAGULL_L2C_CONF_SEAGULL_L2C_REGFILEBASE_MSK			SHIFT12(0xfffff)
#define	SEAGULL_L2C_CONF_SEAGULL_L2C_REGFILEBASE_BASE		12
/*		Bit(s) SEAGULL_L2C_CONF_RSRV_ reserved */
/* L2C write early response enable */
#define	SEAGULL_L2C_CONF_SEAGULL_L2C_BEARLYEN						BIT_1
/* L2C big endian enable */
#define	SEAGULL_L2C_CONF_SEAGULL_L2C_CFGBIGEND						BIT_0

/*	SEAGULL_L2C_SRAM_CONF			0x00B8	<var Processor: Osprey> L2C SRAM
 *											Timing Configuration Register
 */
/*		Bit(s) SEAGULL_L2C_SRAM_CONF_RSRV_ reserved */
/* L2 tag sram read timing */
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_TAG_RTC_MSK		SHIFT6(0x3)
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_TAG_RTC_BASE		6
/* L2 tag sram write timing */
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_TAG_WTC_MSK		SHIFT4(0x3)
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_TAG_WTC_BASE		4
/* L2 data sram read timing */
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_DATA_RTC_MSK		SHIFT2(0x3)
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_DATA_RTC_BASE		2
/* L2 data sram write timing */
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_DATA_WTC_MSK		SHIFT0(0x3)
#define	SEAGULL_L2C_SRAM_CONF_SEAGULL_L2C_DATA_WTC_BASE		0

/*	CA7_SCU_CONF					0x00C0	<var Processor: Application MP>
 *											CPU SCU Prepheral Base Register
 */
/* Base address of the region for SCU memory map */
#define	CA7_SCU_CONF_PERIPHBASE_AP_MSK		SHIFT15(0x1ffff)
#define	CA7_SCU_CONF_PERIPHBASE_AP_BASE		15
/*		Bit(s) CA7_SCU_CONF_RSRV_ reserved */

/*	CA7_CORESIGHT_ROM_ADDR			0x00C4	<var Processor: Application MP>
 *											CPU Coresight Rom addr Register
 */
/* Rom table physical address */
#define	CA7_CORESIGHT_ROM_ADDR_DBGROMADDR_AP_MSK		SHIFT12(0xfffff)
#define	CA7_CORESIGHT_ROM_ADDR_DBGROMADDR_AP_BASE		12
/*		Bit(s) CA7_CORESIGHT_ROM_ADDR_RSRV_ reserved */

/*	CA7_CORESIGHT_SELF_ADDR			0x00C8	<var Processor: Application MP>
 *											CPU Coresight Self addr Register
 */
/* Offset from the ROM table physical address to the debug registers physical address */
#define	CA7_CORESIGHT_SELF_ADDR_DBGSELFADDR_AP_MSK		SHIFT17(0x7fff)
#define	CA7_CORESIGHT_SELF_ADDR_DBGSELFADDR_AP_BASE		17
/*		Bit(s) CA7_CORESIGHT_SELF_ADDR_RSRV_ reserved */

/*	CA7_CPU_SRAM_CONF_0				0x00D0	<var Processor: Application MP>
 *											CPU SRAM_0 Config Register
 */
/*		Bit(s) CA7_CPU_SRAM_CONF_0_RSRV_ reserved */
/* TLB sram read timing */
#define	CA7_CPU_SRAM_CONF_0_TLB_RTC_MSK			SHIFT22(0x3)
#define	CA7_CPU_SRAM_CONF_0_TLB_RTC_BASE		22
/* TLB sram write timing */
#define	CA7_CPU_SRAM_CONF_0_TLB_WTC_MSK			SHIFT20(0x3)
#define	CA7_CPU_SRAM_CONF_0_TLB_WTC_BASE		20
/* L1 Dcache dirty sram read timing */
#define	CA7_CPU_SRAM_CONF_0_DDIRTY_RTC_MSK		SHIFT18(0x3)
#define	CA7_CPU_SRAM_CONF_0_DDIRTY_RTC_BASE		18
/* L1 Dcache dirty sram write timing */
#define	CA7_CPU_SRAM_CONF_0_DDIRTY_WTC_MSK		SHIFT16(0x3)
#define	CA7_CPU_SRAM_CONF_0_DDIRTY_WTC_BASE		16
/* L1 Dcache tag sram read timing */
#define	CA7_CPU_SRAM_CONF_0_DTAG_RTC_MSK		SHIFT14(0x3)
#define	CA7_CPU_SRAM_CONF_0_DTAG_RTC_BASE		14
/* L1 Dcache tag sram write timing */
#define	CA7_CPU_SRAM_CONF_0_DTAG_WTC_MSK		SHIFT12(0x3)
#define	CA7_CPU_SRAM_CONF_0_DTAG_WTC_BASE		12
/* L1 Dcache data sram read timing */
#define	CA7_CPU_SRAM_CONF_0_DDATA_RTC_MSK		SHIFT10(0x3)
#define	CA7_CPU_SRAM_CONF_0_DDATA_RTC_BASE		10
/* L1 Dcache data sram write timing */
#define	CA7_CPU_SRAM_CONF_0_DDATA_WTC_MSK		SHIFT8(0x3)
#define	CA7_CPU_SRAM_CONF_0_DDATA_WTC_BASE		8
/* L1 Icache tag sram read timing */
#define	CA7_CPU_SRAM_CONF_0_ITAG_RTC_MSK		SHIFT6(0x3)
#define	CA7_CPU_SRAM_CONF_0_ITAG_RTC_BASE		6
/* L1 Icache tag sram write timing */
#define	CA7_CPU_SRAM_CONF_0_ITAG_WTC_MSK		SHIFT4(0x3)
#define	CA7_CPU_SRAM_CONF_0_ITAG_WTC_BASE		4
/* L1 Icache data sram read timing */
#define	CA7_CPU_SRAM_CONF_0_IDATA_RTC_MSK		SHIFT2(0x3)
#define	CA7_CPU_SRAM_CONF_0_IDATA_RTC_BASE		2
/* L1 Icache data sram write timing */
#define	CA7_CPU_SRAM_CONF_0_IDATA_WTC_MSK		SHIFT0(0x3)
#define	CA7_CPU_SRAM_CONF_0_IDATA_WTC_BASE		0

/*	CA7_CPU_SRAM_CONF_1				0x00D4	<var Processor: Application MP>
 *											CPU SRAM_1 Config Register
 */
/*		Bit(s) CA7_CPU_SRAM_CONF_1_RSRV_ reserved */
/* scu sram read timing */
#define	CA7_CPU_SRAM_CONF_1_SCU_SRAM_RTC_MSK		SHIFT14(0x3)
#define	CA7_CPU_SRAM_CONF_1_SCU_SRAM_RTC_BASE		14
/* scu sram write timing */
#define	CA7_CPU_SRAM_CONF_1_SCU_SRAM_WTC_MSK		SHIFT12(0x3)
#define	CA7_CPU_SRAM_CONF_1_SCU_SRAM_WTC_BASE		12
/*		Bit(s) CA7_CPU_SRAM_CONF_1_RSRV_ reserved */
/* L2 Tag sram read timing */
#define	CA7_CPU_SRAM_CONF_1_L2_TAG_RTC_MSK			SHIFT6(0x3)
#define	CA7_CPU_SRAM_CONF_1_L2_TAG_RTC_BASE			6
/* L2 Tag sram write timing */
#define	CA7_CPU_SRAM_CONF_1_L2_TAG_WTC_MSK			SHIFT4(0x3)
#define	CA7_CPU_SRAM_CONF_1_L2_TAG_WTC_BASE			4
/* L2 Data sram read timing */
#define	CA7_CPU_SRAM_CONF_1_L2_DATA_RTC_MSK			SHIFT2(0x3)
#define	CA7_CPU_SRAM_CONF_1_L2_DATA_RTC_BASE		2
/* L2 Data sram write timing */
#define	CA7_CPU_SRAM_CONF_1_L2_DATA_WTC_MSK			SHIFT0(0x3)
#define	CA7_CPU_SRAM_CONF_1_L2_DATA_WTC_BASE		0

/*	CA7_WARM_RESET_VECTOR			0x00D8	<var Processor: Application MP>
 *											Warm Reset Vector Register
 */
/* CA7 Warm Reset Vector Register Address */
#define	CA7_WARM_RESET_VECTOR_CA7_WARM_RESET_VECTOR_MSK			SHIFT0(0xffffffff)
#define	CA7_WARM_RESET_VECTOR_CA7_WARM_RESET_VECTOR_BASE		0

/*	CA7_CORE_CONF					0x00E0	<var Processor: Application> Core0
 *											Configuration Register
 */
/*		Bit(s) CA7_CORE_CONF_RSRV_ reserved */
#define	CA7_CORE_CONF_DBGEN				BIT_27			/* Invasive debug enable */
/* Non-invasive debug enable */
#define	CA7_CORE_CONF_NIDEN				BIT_26
/* Secure priviledged invasive debug enable */
#define	CA7_CORE_CONF_SPIDEN			BIT_25
/* Secure priviledged non-invasive debug enable */
#define	CA7_CORE_CONF_SPNIDEN			BIT_24
/*		Bit(s) CA7_CORE_CONF_RSRV_ reserved */
/* Controls the state of EE bit in the CP15 System Control Register */
#define	CA7_CORE_CONF_CFGEND			BIT_5
/* Processor Out-of-Reset exception handling state */
#define	CA7_CORE_CONF_CFGTE				BIT_4
/* Configures fast interrupts to be nonmaskable */
#define	CA7_CORE_CONF_CFGNMFI			BIT_3
/* external debug agent modify debug register enable */
#define	CA7_CORE_CONF_DBGSWENABLE		BIT_2
/* Cp15 Coprocessor Register non-secure write Disable */
#define	CA7_CORE_CONF_CP15SDISABLE		BIT_1
#define	CA7_CORE_CONF_VINITHI			BIT_0			/* Vector Init High */

/*	SW_SCRATCH						0x00E8	Software Scratch Register */
#define	SW_SCRATCH_SW_SCRATCH_MSK		SHIFT0(0xffffffff)	/* SW_SCRATCH */
#define	SW_SCRATCH_SW_SCRATCH_BASE		0



/* -------------------- */


#endif	/* __INC_CIU_H */
