# BBU config file, 
# Note: 
# This file will be included in all other config files.
# JUST PUT THOSE COMMON SETTINGS AMONG OTHER CONFIG FILES HERE

# Set CONFIG_ xxx to y to enable, set to n to disable, or set to some values if necessary
# Remember to set related C compile flags  in bbu_opt.conf as well
# No need to define for Assembly flags because we use CC to do assembly so the CFLAGS applys as well
# Need to make dist_clean and recompile completely if any of the CONFIG_ changes in this file!

#When CONFIG_QPC, will try to compile source codes of QP, otherwise, use the lib in extlib
CONFIG_QPC ?= n

CONFIG_SMP ?= n
ifeq ($(CONFIG_SMP),y)
CORE_NUM = 4
CONFIG_NR_CPUS = 4
else
CORE_NUM = 1
CONFIG_NR_CPUS = 1
endif

CONFIG_CPU_32v7 = y
#The init config of ON/OFF of L1 caches, it may be changed by test or commands later.
CONFIG_CACHE = y
CONFIG_L2_CACHE = y

#CONFIG_DBG enable real time printing to UART, however interrupt may cause print out of order.
#don't recommend use printf in ISR in general due to latency and re-entry possiblity.
#printf can be used in ISR safely with AO mode printf (i.e. disable this option)
#QK kernel preemption is similar to interrupt, so recommend to debug with Vanilla kernel.
CONFIG_DBG = y

#CONFIG_QS enable the qspy trace record with output log from cp uart.
CONFIG_QS = n
#CONFIG_QS_EXT enable the intput channel with the qspy trace record and some filter mechnism.
#We can input bbu commands with cp uart to get bi-directional channel.
#There is also a new filter mechnism can be used with ao sm and etc with macro turn on.
#We need BST(BBUSpyTool) on PC side to cooperate with SoC board.
#CONFIG_QS and CONFIG_QS_EXT should be enable together in nezha2.
CONFIG_QS_EXT = n

CONFIG_MULTI_UART = n

#You can enable QK kernel if necessary, in a good design, Vanilla kernel should be enough and it's simple.
#if QK is unvoidable, you can enable it but recommned to disable it when debugging it with JTAG
CONFIG_QK = n

#switch the OS tick among three kind of timers
#for now, we use APB timers, if neither is defined, it will use SOC generic timer 
CONFIG_APB_TIME_TICK = y
CONFIG_LOCAL_TIME_TICK = n
CONFIG_GENERIC_TIME = n
CONFIG_CP_TIME_TICK = n
ifeq ($(CORE), msa)
CONFIG_STACK ?= n
else
CONFIG_STACK ?= y
endif
CONFIG_QH ?= n 
CONFIG_TMARK ?= y

CONFIG_FAT32 ?= n
CONFIG_TCPIP ?= n
CONFIG_TPERF ?= n
CONFIG_WEB_SERVER = n

PMIC ?= ustica

CONFIG_NATO = n
CONFIG_SUSP_DBG = n
CONFIG_TZ = n
CONFIG_ETM_PTM = n
CONFIG_PMIC = y
CONFIG_CPU_AO = n
CONFIG_SDH_API_TEST = n
CONFIG_MMT = n
#For usb serial test 
CONFIG_USB_UART_DEFAULT= n
#For  linux usb class test
CONFIG_USB_LINUX_MODE= n
CONFIG_USB3 = y
CONFIG_NANO_USB_SER = n

CONFIG_PPSET_CHECK ?= n
CONFIG_HWDFC ?= y
ifeq ($(CONFIG_HWDFC),y)
CONFIG_HWDVC = y
endif
#Enable Hardware DVC
CONFIG_HWDVC ?= y
#Enable AXI, etc. freq bindings to DDR 
CONFIG_DDR_ACLK_BINDING ?= n

#Enable PCIE
CONFIG_PCIE ?= n

CONFIG_NAND ?= y
PLATFORM ?= zebu

CONFIG_DP_ALONE = y
CONFIG_CP_ALONE = y
CONFIG_AP_ALONE = n
ifeq ($(CONFIG_CP_ALONE), y)
CONFIG_UART_AP = n
else
CONFIG_UART_AP = y
endif

CONFIG_SDAT ?= n
CONFIG_SQU ?= y

ifeq ($(CONFIG_SQU), y)
CR5_LOAD_ADDR=0xD1000000
endif